// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id, name, url, user_id, created_at, updated_at)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6)
RETURNING id, name, url, user_id, created_at, updated_at, last_fetched_at
`

type CreateFeedParams struct {
	ID        uuid.UUID
	Name      string
	Url       string
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH new_feed_follow AS (
    INSERT INTO feed_follows (id, user_id, feed_id, created_at, updated_at)
        VALUES ($1,
                $2,
                $3,
                $4,
                $5)
        RETURNING id, user_id, feed_id, created_at, updated_at)
SELECT nff.id, nff.user_id, nff.feed_id, nff.created_at, nff.updated_at,
       u.name AS user_name,
       f.name AS feed_name
FROM new_feed_follow AS nff
         JOIN feeds f ON f.id = nff.feed_id
         JOIN users u ON u.id = nff.user_id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	FeedID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	FeedID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserName  string
	FeedName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.UserID,
		arg.FeedID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const getFeedByUrl = `-- name: GetFeedByUrl :one
SELECT id, name, url, user_id, created_at, updated_at, last_fetched_at
FROM feeds
WHERE url = $1
`

func (q *Queries) GetFeedByUrl(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByUrl, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const getFeedsForUser = `-- name: GetFeedsForUser :many
SELECT f.id, f.name, f.url, f.user_id, f.created_at, f.updated_at, f.last_fetched_at, u.name AS user_name
FROM feeds f
         JOIN feed_follows ff ON ff.feed_id = f.id
         JOIN users u ON u.id = ff.user_id
WHERE u.name = $1
`

type GetFeedsForUserRow struct {
	ID            uuid.UUID
	Name          string
	Url           string
	UserID        uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	LastFetchedAt sql.NullTime
	UserName      string
}

func (q *Queries) GetFeedsForUser(ctx context.Context, name string) ([]GetFeedsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsForUser, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsForUserRow
	for rows.Next() {
		var i GetFeedsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastFetchedAt,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedsWithUserName = `-- name: GetFeedsWithUserName :many
SELECT f.id, f.name, f.url, f.user_id, f.created_at, f.updated_at, f.last_fetched_at, u.name AS user_name
FROM feeds f
         JOIN users u ON u.id = f.user_id
`

type GetFeedsWithUserNameRow struct {
	ID            uuid.UUID
	Name          string
	Url           string
	UserID        uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	LastFetchedAt sql.NullTime
	UserName      string
}

func (q *Queries) GetFeedsWithUserName(ctx context.Context) ([]GetFeedsWithUserNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsWithUserName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsWithUserNameRow
	for rows.Next() {
		var i GetFeedsWithUserNameRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastFetchedAt,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT id, name, url, user_id, created_at, updated_at, last_fetched_at
FROM feeds
ORDER BY last_fetched_at NULLS FIRST
LIMIT 1
`

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const markFeedFetched = `-- name: MarkFeedFetched :execrows
UPDATE feeds
SET last_fetched_at = NOW(),
    updated_at      = NOW()
WHERE id = $1
`

func (q *Queries) MarkFeedFetched(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, markFeedFetched, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const unfollowFeed = `-- name: UnfollowFeed :execrows
DELETE
FROM feed_follows
WHERE user_id = $1
  AND feed_id = $2
`

type UnfollowFeedParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

func (q *Queries) UnfollowFeed(ctx context.Context, arg UnfollowFeedParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, unfollowFeed, arg.UserID, arg.FeedID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
